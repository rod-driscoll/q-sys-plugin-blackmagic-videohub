-- 20231212 v1.0 Rod Driscoll <rod@theavitgroup.com.au>
-- <https://documents.blackmagicdesign.com/UserManuals/Videohub12GInstallation.pdf?_v=1680591612000>
  -- initial version
-- 20240227 v1.1.0 Rod Driscoll<rod@theavitgroup.com.au>
  -- input/output label index start changed from 0 to 1

-- Information block for the plugin
PluginInfo = {
  Name = "BlackMagic~VideoHub-1.1.0-DEV-UI", -- The tilde here indicates folder structure in the Shematic Elements pane
  Version = "1.1.0-DEV-UI",
  Id = "blackmagic-videohub.plugin.1.1.0-DEV-UI",
  Description = "Plugin for controlling a BlackMagic VideoHub-DEV-UI",
  ShowDebug = true,
  Author = "Rod Driscoll"
}

  -- Define the color of the plugin object in the design
  function GetColor(props)
    return { 102, 102, 102 }
  end
  
  -- The name that will initially display when dragged into a design
  function GetPrettyName()
    return "BlackMagic VideoHub " .. PluginInfo.Version
  end
  
  -- Optional function used if plugin has multiple pages
  local PageNames = {"Setup","Device"} --List the pages within the plugin
  function GetPages(props)
    local pages = {}
    for ix,name in ipairs(PageNames) do
      table.insert(pages, {name = PageNames[ix]})
    end
    return pages
  end
  
  -- Define User configurable Properties of the plugin
  function GetProperties()
    local props = {}
    table.insert(props,{
      Name = 'Input Count',
      Type = 'integer',
      Min = 2,
      Max = 127,
      Value = 6
    })
    table.insert(props,{
      Name = 'Output Count',
      Type = 'integer',
      Min = 1,
      Max = 127,
      Value = 2
    })
    table.insert(props,{
      Name    = "Connection Type",
      Type    = "enum", 
      Choices = {"Ethernet", "Serial"},
      Value   = "Ethernet"
    })
    table.insert(props,{
      Name  = "Poll Interval",
      Type  = "integer",
      Min   = 1,
      Max   = 60, 
      Value = 60
    })
    table.insert(props,{
      Name    = "Debug Print",
      Type    = "enum",
      Choices = {"None", "Tx/Rx", "Tx", "Rx", "Function Calls", "All"},
      Value   = "None"
    })
    return props
  end
  
  -- Optional function to define pins on the plugin that are not connected to a Control
  function GetPins(props)
    local pins = {}
    if props["Connection Type"].Value=="Serial" then 
      table.insert(pins,{Name="input", Direction="input", Domain="serial"})
    end
    return pins
  end
  
  -- Optional function to update available properties when properties are altered by the user
  function RectifyProperties(props)
    if props.plugin_show_debug.Value == false then 
      props["Debug Print"].IsHidden = true 
    end
    return props
  end
  
  -- Defines the Controls used within the plugin
  function GetControls(props)
    local ctrls = {}
    
    table.insert(ctrls, {
      Name         = "code",
      ControlType  = "Text",
      Count        = 1,
      UserPin      = true,
      PinStyle     = "Input"
    })
    
    -- Configuration Controls --
    table.insert(ctrls, {
      Name         = "IPAddress",
      ControlType  = "Text",
      Count        = 1,
      DefaultValue = "Enter an IP Address",
      UserPin      = true,
      PinStyle     = "Both"
    })
    table.insert(ctrls, {
      Name         = "TcpPort",
      ControlType  = "Knob",
      ControlUnit  = "Integer",
      DefaultValue = 9990,
      Min          = 1,
      Max          = 65535,
      Count        = 1,
      UserPin      = true,
      PinStyle     = "Both"
    })
    table.insert(ctrls, {
      Name         = "ModelName",
      ControlType  = "Text",
      PinStyle     = "Output",
      UserPin      = true,
      Count        = 1
    })
    table.insert(ctrls, {
      Name         = "DeviceName",
      ControlType  = "Text",
      PinStyle     = "Output",
      UserPin      = true,
      Count        = 1
    })
    table.insert(ctrls, {
      Name         = "DeviceFirmware",
      ControlType  = "Text",
      PinStyle     = "Output",
      UserPin      = true,
      Count        = 1
    })
    table.insert(ctrls, {
      Name         = "SerialNumber",
      ControlType  = "Text",
      PinStyle     = "Output",
      UserPin      = true,
      Count        = 1
    })
    
    -- Status Controls --
    table.insert(ctrls, {
      Name          = "Status",
      ControlType   = "Indicator",
      IndicatorType = Reflect and "StatusGP" or "Status",
      PinStyle      = "Output",
      UserPin       = true,
      Count         = 1
    })
    
    table.insert(ctrls, {
      Name         = "TakeMode",
      ControlType  = "Button",
      ButtonType   = "Toggle",
      PinStyle     = "Both",
      UserPin      = true,
      Count        = 1
    })
    
        -- Switching Controls --
        for i = 1, props['Output Count'].Value do
          for s = 1, props['Input Count'].Value do
              table.insert(ctrls, {
                      Name = "vid-input_" .. s .. "-output_" .. i,
                      ControlType = "Button",
                      ButtonType = "Toggle",
                      PinStyle = "Both",
                      UserPin = true
                  }
              )
          end
      end
    
    -- input Controls --
    for i = 1, props['Input Count'].Value do
      table.insert(ctrls,{
        Name         = "input_" .. i .. "-name",
        ControlType  = "Text",
        DefaultValue = "Input " .. i,
        Count        = 1,
        UserPin      = true,
        PinStyle     = "Both"
      })
    end
    
    -- output Controls --
    for i = 1, props['Output Count'].Value do
      table.insert(ctrls,{
        Name         = "output_" .. i .. "-name",
        ControlType  = "Text",
        DefaultValue = "Output " .. i,
        Count        = 1,
        UserPin      = true,
        PinStyle     = "Both"
      })
      table.insert(ctrls, {
        Name         = "output_" .. i .. "-lock",
        ControlType  = "Button",
        ButtonType   = "Toggle",
        Count        = 1,
        UserPin      = true,
        PinStyle     = "Both"
      })
      table.insert(ctrls, {
        Name         = "output_" .. i .. "-source",
        ControlType  = "Text",
        Style        = "ComboBox",
        Count        = 1,
        UserPin      = true,
        PinStyle     = "Both"
      })
    end
    return ctrls
  end
  
  --Layout of controls and graphics for the plugin UI to display
  function GetControlLayout(props)
    local layout = {}
    local graphics = {}
    local CurrentPage = PageNames[props["page_index"].Value]
      
    local colors = {  -- taken from some other plugin and not really kept track
      Background  = {232,232,232},
      Transparent = {255,255,255,0},
      Text        = {24,24,24},
      Header      = {0,0,0},
      Button      = {48,32,40},
      Red         = {217,32,32},
      DarkRed     = {80,16,16},
      Green       = {32,217,32},
      OKGreen     = {48,144,48},
      Blue        = {32,32,233},
      Black       = {0,0,0},
      White       = {255,255,255},
      Gray        = {96,96,96}
    }
    
    local function label(graphic)
      for k,v in pairs({
        Type = 'Label',
        Color = { 0, 0, 0 },
        HTextAlign = 'Right',
        FontSize = 14
      }) do graphic[k] = graphic[k] or v; end;
      table.insert(graphics, graphic);
    end;
    
    local function textinput(layout)
      for k,v in pairs({
        Color = { 208, 208, 208 },
        StrokeColor = { 102, 102, 102 },
        StrokeWidth = 2,
        CornerRadius = 8,
        FontSize = 12,
        Margin = 10,
        TextBoxStyle = 'Normal'
      }) do layout[k] = layout[k] or v; end;
      return layout;
      end;
    
    layout["code"]={PrettyName="code",Style="None"}  
        
    if(CurrentPage == 'Setup') then
      -- User defines connection properties
      table.insert(graphics,{Type="GroupBox",Text="Connect",Fill=colors.Background,StrokeWidth=1,CornerRadius=4,HTextAlign="Left",Position={5,5},Size={400,120}})
      if props["Connection Type"].Value=="Ethernet" then 
        table.insert(graphics,{Type="Text",Text="IP Address",Position={15,35},Size={100,16},FontSize=14,HTextAlign="Right"})
        layout["IPAddress"] = {PrettyName="Settings~IP Address",Style="Text",Color=colors.White,Position={120,35},Size={99,16},FontSize=12}
        table.insert(graphics,{Type="Text",Text="Port",Position={15,60},Size={100,16},FontSize=14,HTextAlign="Right"})
        layout["TcpPort"] = {PrettyName="Settings~Port",Style="Text",Position={120,60},Size={99,16},FontSize=12}
        table.insert(graphics,{Type="Text",Text="(9990 default)",Position={221,60},Size={100,18},FontSize=10,HTextAlign="Left"})
      else
        table.insert(graphics,{Type="Text",Text="Reset Serial",Position={5,32},Size={110,16},FontSize=14,HTextAlign="Right"})
        layout["Reset"] = {PrettyName="Settings~Reset Serial", Style="Button", Color=colors.Button, FontColor=colors.Red, FontSize=14, CornerRadius=2, Position={120,30}, Size={50,20} }
      end
    
      -- Status fields updated upon connect show model/name/serial/sw rev
      table.insert(graphics,{Type="GroupBox",Text="Status",Fill=colors.Background,StrokeWidth=1,CornerRadius=4,HTextAlign="Left",Position={5,135},Size={400,220}})
      layout["Status"] = {PrettyName="Status~Connection Status", Position={40,165}, Size={330,32}, Padding=4 }
      table.insert(graphics,{Type="Text",Text="Friendly Name",Position={15,212},Size={100,16},FontSize=12,HTextAlign="Right"})
      layout["DeviceName"] = {PrettyName="Status~Friendly Name", Style="Text", HTextAlign="Left", IsReadOnly=true, Color=colors.Transparent, StrokeWidth=0, FontSize=14, IsBold=true, FontColor=colors.Text, Position={120,211}, Size={255,16} }
      table.insert(graphics,{Type="Text",Text="Model Name",Position={15,235},Size={100,16},FontSize=12,HTextAlign="Right"})
      layout["ModelName"] = {PrettyName="Status~Model Name", Style="Text", HTextAlign="Left", IsReadOnly=true, Color=colors.Transparent, StrokeWidth=0, FontSize=14, IsBold=true, FontColor=colors.Text, Position={120,234}, Size={255,16} }
      table.insert(graphics,{Type="Text",Text="Serial Number",Position={15,258},Size={100,16},FontSize=12,HTextAlign="Right"})
      layout["SerialNumber"] = {PrettyName="Status~Serial Number", Style="Text", HTextAlign="Left", IsReadOnly=true, Color=colors.Transparent, StrokeWidth=0, FontSize=14, IsBold=true, FontColor=colors.Text, Position={120,257}, Size={255,16} }
        table.insert(graphics,{Type="Text",Text="Software Version",Position={15,281},Size={100,16},FontSize=12,HTextAlign="Right"})
      layout["DeviceFirmware"] = {PrettyName="Status~SW Version", Style="Text", HTextAlign="Left", IsReadOnly=true, Color=colors.Transparent, StrokeWidth=0, FontSize=14, IsBold=true, FontColor=colors.Text, Position={120,280}, Size={255,16} }
    
      table.insert(graphics,{Type="Text",Text=GetPrettyName(),Position={15,200},Size={380,14},FontSize=10,HTextAlign="Right", Color=colors.Gray})
    
    elseif(CurrentPage == 'Device') then 
    
      --local helper = require("Helpers")
      helper = {}
      helper.Copy = function(tbl, seen)
        if type(tbl) ~= 'table' then return tbl end
        if seen and seen[tbl] then return seen[tbl] end
        local s = seen or {}
        local res = setmetatable({}, getmetatable(tbl))
        s[tbl] = res
        for k, v in pairs(tbl) do
            res[helper.Copy(k, s)] = helper.Copy(v, s)
        end
        if res==nil then print('Copy(): returning nil') end
        return res
      end  
    
      -- create objects for each section so they can be modified easily
      -- add crosspoints (routes, labels, groupbox)
      local UI_crosspoints = {
        Position     = { 0, 8 },
        --Size        = { 0, 0 }, -- GroupBox contains Size of the whole object
        --buttons
        Padding     = { 4, 4 },
        GroupPadding= { 4, 4 },
        Button      = { Style = "Button", Size = { 36, 36}, Margin = 0 },
        NameText    = { Style = "Text", Type="Text", Color=colors.White, FontSize=10, HTextAlign="Center", WordWrap = true },
        NumButtons  = { props['Input Count'].Value, props['Output Count'].Value },
        Label       = { Style = "Label", Size = { 74, 14} , Type="Text", FontSize=10, HTextAlign="Center", WordWrap = true },
        Outputs     = {}, -- to be filled in Init()
        --groupbox
        GroupBox    = { Type="GroupBox", Text="", StrokeWidth=1, CornerRadius=4, HTextAlign="Left" },
        
        Init = function (self)
          if self.NumButtons[1] > 12 or self.NumButtons[2] > 12 then 
            self.Padding     = { 1, 1 }
            self.Button.Size = { 18, 18 }
          end
          self.GroupBox.Size = {
            self.Padding[1] + self.NumButtons[1]*(self.Padding[1] + self.Button.Size[1]),
            self.Padding[2] + self.NumButtons[2]*(self.Padding[2] + self.Button.Size[2]) + self.Label.Size[2]+ self.Padding[2] }
          self.GroupBox.Position  = self.Position
          for i=1, self.NumButtons[1] do          
            for o=1, self.NumButtons[2] do
              local btn_ = helper.Copy(self.Button)
              btn_['PrettyName'] = "Crosspoints~Output "..o.."~In" ..i .. " -> Out" ..o
              btn_['Legend'] = tostring(i)
              btn_['Position']={
                self.GroupBox.Position[1] + self.Padding[1] + (i-1)*(self.Button.Size[1] + self.Padding[1]), -- moving accross
                self.GroupBox.Position[2] + self.Padding[2] + (o-1)*(self.Button.Size[2] + self.Padding[2]) + self.Label.Size[2]+ self.Padding[2] } -- moving down
              btn_.Layout_ID = "vid-input_" ..i.. "-output_" ..o
              if self.Outputs[(o-1)]==nil then self.Outputs[(o-1)]={} end
              self.Outputs[(o-1)][(i-1)]=btn_
            end
          end
        end,
    
        Draw = function(self, layout)
          --table.insert(graphics, self.GroupBox)
          for _,o in pairs(self.Outputs) do 
            for _,i in pairs(o) do layout[i.Layout_ID] = i end -- layout is the global layout
          end
        end,
    
        Move = function(self, distance)
          self.Position[1] = self.Position[1] + distance[1]
          self.Position[2] = self.Position[2] + distance[2]
          for _,o in pairs(self.Outputs) do 
            for _,i in pairs(o) do 
              i.Position[1] = i.Position[1] + distance[1]
              i.Position[2] = i.Position[2] + distance[2]
            end
          end
        end
      }
    
      -- add outputs (names, locks)
      local UI_outputObjects = {
        --Position    = helper.Copy(UI_crosspoints.GroupBox.Position),
        Position    = helper.Copy(UI_crosspoints.Position),
        --buttons
        Padding     = helper.Copy(UI_crosspoints.Padding),
        NameText    = helper.Copy(UI_crosspoints.NameText), --Size = { 36, 54}      
        NumButtons  = props['Output Count'].Value,
        Buttons     = {}, -- to be filled in Init()
        Labels      = {}, -- to be filled in Init()
        --groupbox
        GroupBox    = helper.Copy(UI_crosspoints.GroupBox),
    
        Init = function(self)
          self.NameText.Size = { 54, UI_crosspoints.Button.Size[2] }
          self.LockButtons = {}
          -- GroupBox
          self.GroupBox.Size = {
            self.Padding[1], -- horiz, to be increased as buttons added
            UI_crosspoints.GroupBox.Size[2] } -- vert same as crosspoint GroupBox
          self.GroupBox.Position = self.Position
          self.GroupBox.Text="Outputs"
    
          local newPos_ = {}
    
          for o=1, self.NumButtons do
            newPos_ = {
              self.GroupBox.Position[1] + self.Padding[1], -- horiz always the same [output:0][input:0][horiz]
              UI_crosspoints.Outputs[(o-1)][0].Position[2] } -- vert moves down
            
              -- left column of labels (numbers only)
            local num_ = helper.Copy(UI_crosspoints.Label)
            num_.Size = { 18, UI_crosspoints.Button.Size[2] }
            num_["Text"] = tostring(o)
            num_['Position'] = helper.Copy(newPos_)
            if o==1 then 
              self.GroupBox.Size[1] = self.GroupBox.Size[1] + num_.Size[1] + self.Padding[1]
            end
            newPos_[1] = newPos_[1] + num_.Size[1] + self.Padding[1]
            table.insert(self.Labels, num_)
    
            -- Names
            local name_ = helper.Copy(self.NameText)
            name_['PrettyName'] = "Outputs~"..o.."~name"
            name_['Position'] = helper.Copy(newPos_)
            name_.Layout_ID = "output_" ..o.. "-name"
            if o==1 then 
              self.GroupBox.Size[1] = self.GroupBox.Size[1] + name_.Size[1] + self.Padding[1]
            end
            newPos_[1] = newPos_[1] + name_.Size[1] + self.Padding[1]
            table.insert(self.Buttons, name_)
            
            -- Locks
            local btn_ = helper.Copy(UI_crosspoints.Button)
            btn_['PrettyName'] = "Outputs~"..o.."~lock"
            btn_['Legend'] = tostring(o)
            btn_['Position'] = helper.Copy(newPos_)
            btn_.Layout_ID = "output_" ..o.. "-lock"
            if o==1 then
              self.GroupBox.Size[1] = self.GroupBox.Size[1] + btn_.Size[1] + self.Padding[1] end
            newPos_[1] = newPos_[1] + btn_.Size[1] + self.Padding[1]
            table.insert(self.Buttons, btn_)
            
            -- Lock label (the word lock)
            if o==1 then
              local lbl_ = helper.Copy(UI_crosspoints.Label)
              lbl_.Size[1] = btn_.Size[1]
              lbl_["Text"] = 'Lock'
              lbl_['Position'] = {
                btn_.Position[1], -- horiz always the same
                self.GroupBox.Position[2] + self.Padding[2] } -- vert moves down
              table.insert(self.Labels, lbl_)
            end
    
          end
          -- set new position of UI_Crosspoints
          UI_crosspoints:Move({ newPos_[1] - UI_crosspoints.Outputs[0][0].Position[1] + self.Padding[1], 0})
          self.GroupBox.Size[1] = self.GroupBox.Size[1] + UI_crosspoints.GroupBox.Size[1]
        end,
    
        Draw = function(self, layout)
          table.insert(graphics, self.GroupBox)
          for _,l in ipairs(self.Labels ) do table.insert(graphics, l) end
          for _,b in ipairs(self.Buttons) do layout[b.Layout_ID] = b  end-- layout is the global layout
        end,
    
        Move = function(self, distance)
          self.Position[1] = self.Position[1] + distance[1]
          self.Position[2] = self.Position[2] + distance[2]
          for _,l in ipairs(self.Labels) do 
            l.Position[1] = l.Position[1] + distance[1]
            l.Position[2] = l.Position[2] + distance[2]
          end
          for _,b in pairs(self.Buttons) do 
            b.Position[1] = b.Position[1] + distance[1]
            b.Position[2] = b.Position[2] + distance[2]
          end
        end
      }
    
      -- add inputs (names)
      local UI_inputObjects = {
        Position    = {},
        --buttons
        Padding     = helper.Copy(UI_crosspoints.Padding),
        Button      = helper.Copy(UI_crosspoints.Button),
        NameText    = helper.Copy(UI_crosspoints.NameText), --Size = { 36, 54}      
        NumButtons  = props['Input Count'].Value,
        Buttons     = {}, -- to be filled in Init()
        Labels      = {}, -- to be filled in Init()
        --groupbox
        GroupBox    = helper.Copy(UI_crosspoints.GroupBox),
    
        Init = function(self)
          self.NameText.Size = { UI_crosspoints.Button.Size[1], 54 }
          self.Position = helper.Copy(UI_crosspoints.GroupBox.Position)
          -- GroupBox   
          self.GroupBox.Size = {
            UI_crosspoints.GroupBox.Size[1], -- horiz, same as crosspoints
            UI_crosspoints.Label.Size[2] + self.Padding[2] + UI_crosspoints.Label.Size[2] + self.Padding[2] + UI_crosspoints.GroupBox.Size[2] + self.Padding[2] } -- vert, increase as objects added   
          self.GroupBox.Position = self.Position
          self.GroupBox.Text="Inputs"
    
          for i=1, self.NumButtons do
            -- top row of labels (numbers only) above crosspoints
            local lbl_ = helper.Copy(UI_crosspoints.Label)
            lbl_.Size[1] = self.Button.Size[1]
            lbl_["Text"] = tostring(i)            
            lbl_['Position']={
              UI_crosspoints.Outputs[0][(i-1)].Position[1], -- horiz moves accross
              self.Position[2] + UI_crosspoints.Label.Size[2] + self.Padding[2] } -- vert always the same
            --if i==0 then self.GroupBox.Size[2] = self.GroupBox.Size[2] + lbl_.Size[2] + self.Padding[2] end
            table.insert(self.Labels, lbl_)
    
            -- Names - below crosspoints
            local name_ = helper.Copy(self.NameText)
            name_['PrettyName'] = "Inputs~"..i.."~name"
            name_['Position']={ 
              lbl_.Position[1], -- horiz moves accross
              lbl_.Position[2] + lbl_.Size[2] + self.Padding[2] + UI_crosspoints.GroupBox.Size[2] + self.Padding[2] } -- vert always the same
            name_.Layout_ID = "input_" ..i.. "-name"
            if i==1 then self.GroupBox.Size[2] = self.GroupBox.Size[2] + name_.Size[2] + self.Padding[2] end
            table.insert(self.Buttons, name_)
          end
          
          -- move other objects down
          UI_crosspoints:Move  ({0, UI_crosspoints.Label.Size[2] + self.Padding[2] + UI_crosspoints.Label.Size[2] + self.Padding[2] })
          UI_outputObjects:Move({0, UI_crosspoints.Label.Size[2] + self.Padding[2] + UI_crosspoints.Label.Size[2] + self.Padding[2] })
        end,
    
        Draw = function(self, layout)
          table.insert(graphics, self.GroupBox)
          for _,l in ipairs(self.Labels ) do table.insert(graphics, l) end
          for _,b in ipairs(self.Buttons) do  layout[b.Layout_ID] = b end -- layout is the global layout
        end,
    
        Move = function(self, distance)
          self.Position[1] = self.Position[1] + distance[1]
          self.Position[2] = self.Position[2] + distance[2]
          self.GroupBox.Position[1] = self.GroupBox.Position[1] + distance[1]
          self.GroupBox.Position[2] = self.GroupBox.Position[2] + distance[2]
          for _,l in ipairs(self.Labels) do 
            l.Position[1] = l.Position[1] + distance[1]
            l.Position[2] = l.Position[2] + distance[2]
          end
          for _,b in pairs(self.Buttons) do 
            b.Position[1] = b.Position[1] + distance[1]
            b.Position[2] = b.Position[2] + distance[2]
          end
        end
      }
    
      -- add post fade objects (source ComboBoxes)
      local UI_postFadeObjects = {
        Position    = helper.Copy(UI_crosspoints.Position),
        --buttons
        Padding     = helper.Copy(UI_crosspoints.Padding),
        NameText    = helper.Copy(UI_crosspoints.NameText), --Size = { 36, 54}      
        Selector    = { Style = "ComboBox", Type="Text", Size={100, UI_crosspoints.Button.Size[2]}, Color=colors.White, FontSize=10, HTextAlign="Center", WordWrap = true },
        NumButtons  = props['Output Count'].Value,
        Buttons     = {}, -- to be filled in Init()
        --groupbox
        GroupBox    = helper.Copy(UI_crosspoints.GroupBox),
    
        Init = function(self)
          self.NameText.Size = { 54, UI_crosspoints.Button.Size[2] }
          -- GroupBox
          self.GroupBox.Size = {
            self.Padding[1], -- horiz, to be increased as buttons added
            UI_crosspoints.Label.Size[2] + self.Padding[2] + UI_crosspoints.Label.Size[2] + self.Padding[2] + UI_crosspoints.GroupBox.Size[2] } -- vert, increase as objects added   
          self.GroupBox.Position = {
            UI_crosspoints.GroupBox.Position[1] + UI_crosspoints.GroupBox.Size[1] + self.Padding[1],
            UI_inputObjects.GroupBox.Position[2] }
          self.GroupBox.Text="Selectors"
    
          for o=1, self.NumButtons do
            -- Names
            local selector_ = helper.Copy(self.Selector)
            selector_['PrettyName'] = "Outputs~"..o.."~source"
            selector_['Position']={ 
              self.GroupBox.Position[1] + self.Padding[1], 
              UI_crosspoints.Outputs[(o-1)][0].Position[2] } -- vert moves down
            selector_.Layout_ID = "output_" ..o.. "-source"
            if o==1 then self.GroupBox.Size[1] = self.GroupBox.Size[1] + selector_.Size[1] + self.Padding[1] end
            table.insert(self.Buttons, selector_)
          end
    
          UI_outputObjects.GroupBox.Size[1] = UI_outputObjects.GroupBox.Size[1] + self.Padding[1] + self.GroupBox.Size[1]
        end,
    
    
        Draw = function(self, layout)
          table.insert(graphics, self.GroupBox)
          for _,b in ipairs(self.Buttons) do layout[b.Layout_ID] = b  end-- layout is the global layout
        end
      }
    
      UI_crosspoints:Init() -- initialize the crosspoints so other components can reference it's positions
      UI_outputObjects:Init() -- this also moves crosspoints to the right
      UI_inputObjects:Init() -- this also moves crosspoints down
      UI_postFadeObjects:Init() -- this also expands output GroupBox to the right
      
      UI_crosspoints:Draw(layout)
      UI_outputObjects:Draw(layout)
      UI_inputObjects:Draw(layout)
      UI_postFadeObjects:Draw(layout)
    
    end
     
    return layout, graphics
  end